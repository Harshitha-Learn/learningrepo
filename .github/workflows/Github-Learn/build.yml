name: Build CI

on:  
  workflow_dispatch: 
  push:
     branches: 
      - 'main'
      - 'release-**'
     paths:     
      - 'ADF/**'
  pull_request:
     branches: 
      - 'main'
      - 'release-**'
     paths:     
       - 'ADF/**'
  workflow_call:
    

env: 
 LOCATION: 'easteurope'
jobs:
  build:
    runs-on: ubuntu-latest 
    #[self-hosted, <name>] for selfhosted
     

    steps:
      # Checkout the repo
      - uses: actions/checkout@v3
      
      - name: 'Lint code'
        run: |
         az bicep build --file ./Infra/<folder>/main.bicep
             
      # Setup .NET Core SDK -- no need of this if dotnet is installed on selfhosted runner
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }} 
      - name: Services - restore dependencies
        run: |
         dotnet restore 
        working-directory: sampleapp11 #folder path where sln exists
     
      # Run dotnet build and publish
      - name: dotnet build 
        run: |
          dotnet build  --configuration Release --no-restore
        working-directory: sampleapp11

      - name: unit Test run
        run: dotnet test --logger trx
        working-directory: sampleapp11

      - name: dotnet  publish
        run: |         
          dotnet publish  --configuration Release --output Release
        working-directory: sampleapp11/webapp1/


      - name: Publish Artifacts
        uses: actions/upload-artifact@v3
        with:
            name: webapp1
            path: ./sampleapp11/webapp1/Release
            
          #EF Migration 
      - name: DB - Generate EF Migration script
        run: dotnet-ef migrations script  --output SQL/GeneratedSQLScripts.sql --idempotent
        working-directory: <path to proj web/controller code>

      - name: EF SQL scripts - Publish Artifacts
        uses: actions/upload-artifact@v3
        with:
             name: SQLScripts
             path: ./<path to proj web/controller code>/SQL
            
      - name: Send custom JSON data to Slack workflow
        id: slack
        if: ${{ failure() }}
        uses: slackapi/slack-github-action@v1.23.0
        with:
          # For posting a rich message using Block Kits
          payload: |
            {
             "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                   
                 "text": "CCM GitHub Action result: \n *Status:* ${{ job.status }}\n *Job Name:* ${{ github.job }}  \n *worflow:* ${{ github.workflow }} \n *Repository:* ${{ github.repository }} \n Link: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }} "  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.ACTION_MONITORING_SLACK }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
